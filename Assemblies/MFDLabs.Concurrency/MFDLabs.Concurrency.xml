<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MFDLabs.Concurrency</name>
    </assembly>
    <members>
        <member name="T:MFDLabs.Concurrency.Base.Async.AsyncBasePlugin`1">
            <summary>
            An <see cref="T:MFDLabs.Concurrency.Base.Async.AsyncBasePlugin`1"/> for async style receivers with no item.
            </summary>
            <typeparam name="TSingleton">The typeof the <typeparamref name="TSingleton"/></typeparam>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.Async.AsyncBasePlugin`1.OnReceive(MFDLabs.Concurrency.Packet)">
            <summary>
            The method to be invoked when the <see cref="T:Microsoft.Ccr.Core.Arbiter"/> calls <see cref="M:Microsoft.Ccr.Core.Arbiter.Activate(Microsoft.Ccr.Core.DispatcherQueue,Microsoft.Ccr.Core.ITask[])"/> with a new <see cref="T:MFDLabs.Concurrency.Packet"/>.
            </summary>
            <param name="packet">The <see cref="T:MFDLabs.Concurrency.IPacket"/> to be used when executing the task.</param>
            <returns>Returns a <see cref="T:System.Threading.Tasks.Task`1"/> to be awaited by tasks and task threads.</returns>
        </member>
        <member name="T:MFDLabs.Concurrency.Base.Async.AsyncBasePlugin`2">
            <summary>
            An <see cref="T:MFDLabs.Concurrency.Base.Async.AsyncBasePlugin`2"/> for async style receivers with an item.
            </summary>
            <typeparam name="TSingleton">The typeof the <typeparamref name="TSingleton"/></typeparam>
            <typeparam name="TItem">The typeof the <typeparamref name="TItem"/> to use</typeparam>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.Async.AsyncBasePlugin`2.OnReceive(MFDLabs.Concurrency.Packet{`1})">
            <summary>
            The method to be invoked when the <see cref="T:Microsoft.Ccr.Core.Arbiter"/> calls <see cref="M:Microsoft.Ccr.Core.Arbiter.Receive``1(System.Boolean,Microsoft.Ccr.Core.Port{``0},Microsoft.Ccr.Core.Handler{``0})"/> with a new <see cref="T:MFDLabs.Concurrency.Packet`1"/>.
            </summary>
            <param name="packet">The <see cref="T:MFDLabs.Concurrency.IPacket`1"/> to be used when executing the task.</param>
            <returns>Returns a <see cref="T:System.Threading.Tasks.Task`1"/> to be awaited by tasks and task threads.</returns>
        </member>
        <member name="T:MFDLabs.Concurrency.Base.Async.AsyncBaseTask`2">
            <summary>
            A <see cref="T:MFDLabs.Concurrency.Base.Async.AsyncBasePlugin`2"/> for async style receivers
            </summary>
            <typeparam name="TSingleton">The typeof the <typeparamref name="TSingleton"/></typeparam>
            <typeparam name="TItem">The typeof the <typeparamref name="TItem"/> to use</typeparam>
        </member>
        <member name="P:MFDLabs.Concurrency.Base.Async.AsyncBaseTask`2.Name">
            <summary>
            The name of this <see cref="T:MFDLabs.Concurrency.Base.Async.AsyncBaseTask`2"/> and the <see cref="T:MFDLabs.Concurrency.TaskThreadMonitor"/> when recording performance.
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.Base.Async.AsyncBaseTask`2.CounterRegistry">
            <summary>
            The <see cref="T:MFDLabs.Instrumentation.ICounterRegistry"/> to be used by the task with the <see cref="T:MFDLabs.Concurrency.TaskThreadMonitor"/>.
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.Base.Async.AsyncBaseTask`2.PacketId">
            <summary>
            The <see cref="P:MFDLabs.Concurrency.IPacket.Id"/> to be set when creating new <see cref="T:MFDLabs.Concurrency.Packet`1"/>s
            </summary>
        </member>
        <member name="F:MFDLabs.Concurrency.Base.Async.AsyncBaseTask`2.Port">
            <summary>
            The <see cref="T:Microsoft.Ccr.Core.Port`1"/> to be used when receiving via <see cref="M:Microsoft.Ccr.Core.Arbiter.Receive``1(System.Boolean,Microsoft.Ccr.Core.Port{``0},Microsoft.Ccr.Core.Handler{``0})"/>.
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.Base.Async.AsyncBaseTask`2.CanReceive">
            <summary>
            A boolean that determines if the current task is allowed to receive new members.
            Set to false when the last <see cref="T:MFDLabs.Concurrency.PluginResult"/> is <see cref="F:MFDLabs.Concurrency.PluginResult.StopProcessingAndDeallocate"/>.
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.Async.AsyncBaseTask`2.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.Async.AsyncBaseTask`2.Activate">
            <summary>
            Actives an item inside the <see cref="T:Microsoft.Ccr.Core.Port`1"/>, it doesn't care about if there are items inside of it.
            </summary>
            <returns>Returns the last <see cref="T:MFDLabs.Concurrency.PluginResult"/>.</returns>
        </member>
        <member name="F:MFDLabs.Concurrency.Base.Async.AsyncBaseTask`2.Monitor">
            <summary>
            </summary>
        </member>
        <member name="T:MFDLabs.Concurrency.Base.Async.AsyncBaseTaskThread`2">
            <summary>
            The base task thread but async!! :)
            </summary>
            <typeparam name="TSingleton">the implementated class, must be base task thread or of base task thread.</typeparam>
            <typeparam name="TItem">the item in the port</typeparam>
        </member>
        <member name="P:MFDLabs.Concurrency.Base.Async.AsyncBaseTaskThread`2.ProcessActivationInterval">
            <summary>
            A timeout for each activation of the <see cref="F:MFDLabs.Concurrency.Base.Async.AsyncBaseTask`2.Port"/>.
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.Async.AsyncBaseTaskThread`2.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.Async.AsyncBaseTaskThread`2.Initialize">
            <summary>
            Initialize the task thread.
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.Async.AsyncBaseTaskThread`2.ThreadWorker">
            <summary>
            The thread worker callback.
            </summary>
        </member>
        <member name="T:MFDLabs.Concurrency.Base.Async.AsyncExpiringTaskThread`2">
            <summary>
            WORK IN PROGRESS DO NOT USE IN PROD!!!
            </summary>
            <typeparam name="TSingleton"></typeparam>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="P:MFDLabs.Concurrency.Base.Async.AsyncExpiringTaskThread`2.Singleton">
            <summary>
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.Base.Async.AsyncExpiringTaskThread`2.Expiration">
            <summary>
            The timeout to be implemented when this <see cref="T:MFDLabs.Concurrency.Base.Async.AsyncExpiringTaskThread`2"/> to expire.
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.Async.AsyncExpiringTaskThread`2.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.Async.AsyncExpiringTaskThread`2.ThreadWorker">
            <inheritdoc/>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.Async.AsyncExpiringTaskThread`2.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:MFDLabs.Concurrency.Base.BasePlugin`1">
            <summary>
            An <see cref="T:MFDLabs.Concurrency.Base.BasePlugin`1"/> for receivers with no item.
            </summary>
            <typeparam name="TSingleton">The typeof the <typeparamref name="TSingleton"/></typeparam>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.BasePlugin`1.OnReceive(MFDLabs.Concurrency.Packet@)">
            <summary>
            The method to be invoked when the <see cref="T:Microsoft.Ccr.Core.Arbiter"/> calls <see cref="M:Microsoft.Ccr.Core.Arbiter.Activate(Microsoft.Ccr.Core.DispatcherQueue,Microsoft.Ccr.Core.ITask[])"/> with a new reference <see cref="T:MFDLabs.Concurrency.Packet"/>.
            </summary>
            <param name="packet">The reference <see cref="T:MFDLabs.Concurrency.IPacket"/> to be used when executing the task.</param>
            <returns>Returns a <see cref="T:MFDLabs.Concurrency.PluginResult"/> that determines if the task should continue processing, or should stop processing.</returns>
        </member>
        <member name="T:MFDLabs.Concurrency.Base.BasePlugin`2">
            <summary>
            An <see cref="T:MFDLabs.Concurrency.Base.BasePlugin`2"/> for receivers with an item.
            </summary>
            <typeparam name="TSingleton">The typeof the <typeparamref name="TSingleton"/></typeparam>
            <typeparam name="TItem">The typeof the <typeparamref name="TItem"/> to use</typeparam>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.BasePlugin`2.OnReceive(MFDLabs.Concurrency.Packet{`1}@)">
            <summary>
            The method to be invoked when the <see cref="T:Microsoft.Ccr.Core.Arbiter"/> calls <see cref="M:Microsoft.Ccr.Core.Arbiter.Activate(Microsoft.Ccr.Core.DispatcherQueue,Microsoft.Ccr.Core.ITask[])"/> with a new reference <see cref="T:MFDLabs.Concurrency.Packet`1"/>.
            </summary>
            <param name="packet">The reference <see cref="T:MFDLabs.Concurrency.IPacket`1"/> to be used when executing the task.</param>
            <returns>Returns a <see cref="T:MFDLabs.Concurrency.PluginResult"/> that determines if the task should continue processing, or should stop processing.</returns>
        </member>
        <member name="T:MFDLabs.Concurrency.Base.BaseTask`2">
            <summary>
            A <see cref="T:MFDLabs.Concurrency.Base.BasePlugin`2"/> for receivers
            </summary>
            <typeparam name="TSingleton">The typeof the <typeparamref name="TSingleton"/></typeparam>
            <typeparam name="TItem">The typeof the <typeparamref name="TItem"/> to use</typeparam>
        </member>
        <member name="P:MFDLabs.Concurrency.Base.BaseTask`2.Name">
            <summary>
            The name of this <see cref="T:MFDLabs.Concurrency.Base.BaseTask`2"/> and the <see cref="T:MFDLabs.Concurrency.TaskThreadMonitor"/> when monitoring performance.
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.Base.BaseTask`2.CounterRegistry">
            <summary>
            The <see cref="T:MFDLabs.Instrumentation.ICounterRegistry"/> to be used by the task with the <see cref="T:MFDLabs.Concurrency.TaskThreadMonitor"/>.
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.Base.BaseTask`2.PacketId">
            <summary>
            The <see cref="P:MFDLabs.Concurrency.IPacket.Id"/> to be set when creating new <see cref="T:MFDLabs.Concurrency.Packet`1"/>s
            </summary>
        </member>
        <member name="F:MFDLabs.Concurrency.Base.BaseTask`2.Port">
            <summary>
            The <see cref="T:Microsoft.Ccr.Core.Port`1"/> to be used when receiving via <see cref="M:Microsoft.Ccr.Core.Arbiter.Receive``1(System.Boolean,Microsoft.Ccr.Core.Port{``0},Microsoft.Ccr.Core.Handler{``0})"/>.
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.Base.BaseTask`2.CanReceive">
            <summary>
            A boolean that determines if the current task is allowed to receive new members.
            Set to false when the last <see cref="T:MFDLabs.Concurrency.PluginResult"/> is <see cref="F:MFDLabs.Concurrency.PluginResult.StopProcessingAndDeallocate"/>.
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.BaseTask`2.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.BaseTask`2.Activate">
            <summary>
            Actives an item inside the <see cref="T:Microsoft.Ccr.Core.Port`1"/>, it doesn't care about if there are items inside of it.
            </summary>
            <returns>Returns the last <see cref="T:MFDLabs.Concurrency.PluginResult"/>.</returns>
        </member>
        <member name="F:MFDLabs.Concurrency.Base.BaseTask`2.Monitor">
            <summary>
            Monitor
            </summary>
        </member>
        <member name="T:MFDLabs.Concurrency.Base.BaseTaskThread`2">
            <summary>
            The base task thread !! :)
            </summary>
            <typeparam name="TSingleton">the implementated class, must be base task thread or of base task thread.</typeparam>
            <typeparam name="TItem">the item in the port</typeparam>
        </member>
        <member name="P:MFDLabs.Concurrency.Base.BaseTaskThread`2.ProcessActivationInterval">
            <summary>
            A timeout for each activation of the <see cref="F:MFDLabs.Concurrency.Base.BaseTask`2.Port"/>.
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.BaseTaskThread`2.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.BaseTaskThread`2.Initialize">
            <summary>
            Initialize the task thread.
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.BaseTaskThread`2.ThreadWorker">
            <summary>
            The thread worker callback.
            </summary>
        </member>
        <member name="T:MFDLabs.Concurrency.Base.ExpiringTaskThread`2">
            <summary>
            WORK IN PROGRESS DO NOT USE IN PROD!!!
            </summary>
            <typeparam name="TSingleton"></typeparam>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="P:MFDLabs.Concurrency.Base.ExpiringTaskThread`2.Singleton">
            <summary>
            A singleton of this class
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.Base.ExpiringTaskThread`2.Expiration">
            <summary>
            The timeout to be implemented when this <see cref="T:MFDLabs.Concurrency.Base.ExpiringTaskThread`2"/> to expire.
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.ExpiringTaskThread`2.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.ExpiringTaskThread`2.ThreadWorker">
            <inheritdoc/>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.ExpiringTaskThread`2.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:MFDLabs.Concurrency.Base.Unsafe.UnsafeBasePlugin`1">
            <summary>
            An <see cref="T:MFDLabs.Concurrency.Base.Unsafe.UnsafeBasePlugin`1"/> for unsafe style receivers with no item.
            </summary>
            <typeparam name="TSingleton">The typeof the <typeparamref name="TSingleton"/></typeparam>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.Unsafe.UnsafeBasePlugin`1.OnReceive(MFDLabs.Concurrency.Unsafe.Packet*)">
            <summary>
            The method to be invoked when the <see cref="T:Microsoft.Ccr.Core.Arbiter"/> calls <see cref="M:Microsoft.Ccr.Core.Arbiter.Activate(Microsoft.Ccr.Core.DispatcherQueue,Microsoft.Ccr.Core.ITask[])"/> with a new <see cref="T:MFDLabs.Concurrency.Packet"/>.
            </summary>
            <param name="packet">The <see cref="T:MFDLabs.Concurrency.IPacket"/> to be used when executing the task.</param>
            <returns>Returns a <see cref="T:MFDLabs.Concurrency.PluginResult"/></returns>
        </member>
        <member name="T:MFDLabs.Concurrency.Base.Unsafe.UnsafeBaseTaskThread`2">
            <summary>
            The base task thread !! :)
            </summary>
            <typeparam name="TSingleton">the implementated class, must be base task thread or of base task thread.</typeparam>
            <typeparam name="TItem">the item in the port</typeparam>
        </member>
        <member name="P:MFDLabs.Concurrency.Base.Unsafe.UnsafeBaseTaskThread`2.ProcessActivationInterval">
            <summary>
            A timeout for each activation of the <see cref="F:MFDLabs.Concurrency.Base.BaseTask`2.Port"/>.
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.Unsafe.UnsafeBaseTaskThread`2.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.Unsafe.UnsafeBaseTaskThread`2.Initialize">
            <summary>
            Initialize the task thread.
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.Unsafe.UnsafeBaseTaskThread`2.ThreadWorker">
            <summary>
            The thread worker callback.
            </summary>
        </member>
        <member name="T:MFDLabs.Concurrency.Base.Unsafe.UnsafeExpiringTaskThread`2">
            <summary>
            WORK IN PROGRESS DO NOT USE IN PROD!!!
            </summary>
            <typeparam name="TSingleton"></typeparam>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="P:MFDLabs.Concurrency.Base.Unsafe.UnsafeExpiringTaskThread`2.Singleton">
            <summary>
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.Base.Unsafe.UnsafeExpiringTaskThread`2.Expiration">
            <summary>
            The timeout to be implemented when this <see cref="T:MFDLabs.Concurrency.Base.Unsafe.UnsafeExpiringTaskThread`2"/> to expire.
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.Unsafe.UnsafeExpiringTaskThread`2.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.Unsafe.UnsafeExpiringTaskThread`2.ThreadWorker">
            <inheritdoc/>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.Unsafe.UnsafeExpiringTaskThread`2.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:MFDLabs.Concurrency.Base.Unsafe.UnsafeBaseTask`2">
            <summary>
            A <see cref="T:MFDLabs.Concurrency.Base.Unsafe.UnsafeBasePlugin`1"/> for async style receivers
            </summary>
            <typeparam name="TSingleton">The typeof the <typeparamref name="TSingleton"/></typeparam>
            <typeparam name="TItem">The typeof the <typeparamref name="TItem"/></typeparam>
        </member>
        <member name="P:MFDLabs.Concurrency.Base.Unsafe.UnsafeBaseTask`2.Name">
            <summary>
            The name of this <see cref="T:MFDLabs.Concurrency.Base.Unsafe.UnsafeBasePlugin`1"/> and the <see cref="T:MFDLabs.Concurrency.TaskThreadMonitor"/> when recording performance.
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.Base.Unsafe.UnsafeBaseTask`2.CounterRegistry">
            <summary>
            The <see cref="T:MFDLabs.Instrumentation.ICounterRegistry"/> to be used by the task with the <see cref="T:MFDLabs.Concurrency.TaskThreadMonitor"/>.
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.Base.Unsafe.UnsafeBaseTask`2.PacketId">
            <summary>
            The <see cref="P:MFDLabs.Concurrency.IPacket.Id"/> to be set when creating new <see cref="T:MFDLabs.Concurrency.Packet`1"/>s
            </summary>
        </member>
        <member name="F:MFDLabs.Concurrency.Base.Unsafe.UnsafeBaseTask`2.Port">
            <summary>
            The <see cref="T:Microsoft.Ccr.Core.Port`1"/> to be used when receiving via <see cref="M:Microsoft.Ccr.Core.Arbiter.Receive``1(System.Boolean,Microsoft.Ccr.Core.Port{``0},Microsoft.Ccr.Core.Handler{``0})"/>.
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.Base.Unsafe.UnsafeBaseTask`2.CanReceive">
            <summary>
            A boolean that determines if the current task is allowed to receive new members.
            Set to false when the last <see cref="T:MFDLabs.Concurrency.PluginResult"/> is <see cref="F:MFDLabs.Concurrency.PluginResult.StopProcessingAndDeallocate"/>.
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.Unsafe.UnsafeBaseTask`2.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.Unsafe.UnsafeBaseTask`2.Activate">
            <summary>
            Actives an item inside the <see cref="T:Microsoft.Ccr.Core.Port`1"/>, it doesn't care about if there are items inside of it.
            </summary>
            <returns>Returns the last <see cref="T:MFDLabs.Concurrency.PluginResult"/>.</returns>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.Unsafe.UnsafeBaseTask`2.GetRawDataBuffer(`1)">
            <summary>
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="F:MFDLabs.Concurrency.Base.Unsafe.UnsafeBaseTask`2.Monitor">
            <summary>
            </summary>
        </member>
        <member name="T:MFDLabs.Concurrency.PatchedDispatcherQueue">
            <summary>
            http://social.msdn.microsoft.com/Forums/en-US/roboticsccr/thread/75f441b6-9eb0-4ce9-bbd2-49505ccb4152/
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.PatchedDispatcherQueue.#ctor(System.String,Microsoft.Ccr.Core.Dispatcher)">
            <inheritdoc/>
        </member>
        <member name="M:MFDLabs.Concurrency.PatchedDispatcherQueue.TryDequeue(Microsoft.Ccr.Core.ITask@)">
            <inheritdoc/>
        </member>
        <member name="T:MFDLabs.Concurrency.PacketProcessingStatus">
            <summary>
            The status for a <see cref="T:MFDLabs.Concurrency.Packet"/> when recording metrics via <see cref="T:MFDLabs.Concurrency.TaskThreadMonitor"/>
            </summary>
        </member>
        <member name="F:MFDLabs.Concurrency.PacketProcessingStatus.Success">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="F:MFDLabs.Concurrency.PacketProcessingStatus.Failure">
            <summary>
            If the <see cref="P:MFDLabs.Concurrency.Packet.Status"/> is <see cref="F:MFDLabs.Concurrency.PacketProcessingStatus.Failure"/> then the <see cref="P:MFDLabs.Concurrency.TaskThreadMonitor.AverageRateOfItemsThatFail"/> etc will increment and be sampled.
            </summary>
        </member>
        <member name="T:MFDLabs.Concurrency.PluginResult">
            <summary>
            The result of the <see cref="M:MFDLabs.Concurrency.Base.BasePlugin`1.OnReceive(MFDLabs.Concurrency.Packet@)"/> and <see cref="M:MFDLabs.Concurrency.Base.Async.AsyncBasePlugin`1.OnReceive(MFDLabs.Concurrency.Packet)"/>
            </summary>
        </member>
        <member name="F:MFDLabs.Concurrency.PluginResult.ContinueProcessing">
            <summary>
            The <see cref="T:MFDLabs.Concurrency.Base.BaseTask`2"/> or <see cref="T:MFDLabs.Concurrency.Base.Async.AsyncBaseTask`2"/> should continue processing.
            </summary>
        </member>
        <member name="F:MFDLabs.Concurrency.PluginResult.StopProcessingAndDeallocate">
            <summary>
            The <see cref="T:MFDLabs.Concurrency.Base.BaseTask`2"/> or <see cref="T:MFDLabs.Concurrency.Base.Async.AsyncBaseTask`2"/> should stop processing at deallocate itself.
            </summary>
        </member>
        <member name="T:MFDLabs.Concurrency.AsyncHelper">
            <summary>
            A class for help with Async Begin and End calls.
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncHelper.Call``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},Microsoft.Ccr.Core.PortSet{``0,System.Exception},System.TimeSpan,System.Action)">
            <summary>
            Calls an async method that uses the IAsyncResult pattern
            Posts the result of the method call into a PortSet
            Includes a Timeout!
            </summary>
            <typeparam name="TResult">The result of the async method</typeparam>
            <param name="begin">The BeginXXX function</param>
            <param name="end">The EndXXX function</param>
            <param name="result"></param>
            <param name="timeout"></param>
            <param name="finalizer"></param>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncHelper.BlockingCall``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.TimeSpan,System.Action)">
            <summary>
            Calls an async method that uses the IAsyncResult pattern blocking
            Posts the result of the method call into a PortSet
            Includes a Timeout!
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="begin"></param>
            <param name="end"></param>
            <param name="timeout"></param>
            <param name="finalizer"></param>
            <returns></returns>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncHelper.Call``2(System.Func{``1,System.AsyncCallback,System.Object,System.IAsyncResult},``1,System.Func{System.IAsyncResult,``0},Microsoft.Ccr.Core.PortSet{``0,System.Exception},System.TimeSpan,System.Action)">
            <summary>
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncHelper.Call``3(System.Func{``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},``1,``2,System.Func{System.IAsyncResult,``0},Microsoft.Ccr.Core.PortSet{``0,System.Exception},System.TimeSpan,System.Action)">
            <summary>
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncHelper.Call``4(System.Func{``1,``2,``3,System.AsyncCallback,System.Object,System.IAsyncResult},``1,``2,``3,System.Func{System.IAsyncResult,``0},Microsoft.Ccr.Core.PortSet{``0,System.Exception},System.TimeSpan,System.Action)">
            <summary>
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncHelper.Call``5(System.Func{``1,``2,``3,``4,System.AsyncCallback,System.Object,System.IAsyncResult},``1,``2,``3,``4,System.Func{System.IAsyncResult,``0},Microsoft.Ccr.Core.PortSet{``0,System.Exception},System.TimeSpan,System.Action)">
            <summary>
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncHelper.Call``6(System.Func{``1,``2,``3,``4,``5,System.AsyncCallback,System.Object,System.IAsyncResult},``1,``2,``3,``4,``5,System.Func{System.IAsyncResult,``0},Microsoft.Ccr.Core.PortSet{``0,System.Exception},System.TimeSpan,System.Action)">
            <summary>
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncHelper.Call(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},Microsoft.Ccr.Core.SuccessFailurePort,System.TimeSpan,System.Action)">
            <summary>
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncHelper.Call``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},``0,System.Action{System.IAsyncResult},Microsoft.Ccr.Core.SuccessFailurePort,System.TimeSpan,System.Action)">
            <summary>
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncHelper.Call``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},``0,``1,System.Action{System.IAsyncResult},Microsoft.Ccr.Core.SuccessFailurePort,System.TimeSpan,System.Action)">
            <summary>
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncHelper.Call``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},``0,``1,``2,System.Action{System.IAsyncResult},Microsoft.Ccr.Core.SuccessFailurePort,System.TimeSpan,System.Action)">
            <summary>
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncHelper.Call``4(System.Func{``0,``1,``2,``3,System.AsyncCallback,System.Object,System.IAsyncResult},``0,``1,``2,``3,System.Action{System.IAsyncResult},Microsoft.Ccr.Core.SuccessFailurePort,System.TimeSpan,System.Action)">
            <summary>
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncHelper.Call``5(System.Func{``0,``1,``2,``3,``4,System.AsyncCallback,System.Object,System.IAsyncResult},``0,``1,``2,``3,``4,System.Action{System.IAsyncResult},Microsoft.Ccr.Core.SuccessFailurePort,System.TimeSpan,System.Action)">
            <summary>
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncHelper.GetCollection``2(System.Collections.Generic.ICollection{``0},MFDLabs.Concurrency.AsyncHelper.DoLookup{``0,``1},Microsoft.Ccr.Core.PortSet{System.Collections.Generic.ICollection{``1},System.Exception})">
            <summary>
            </summary>
        </member>
        <member name="T:MFDLabs.Concurrency.AsyncHelper.DoLookup`2">
            <summary>
            </summary>
        </member>
        <member name="T:MFDLabs.Concurrency.AsyncWorkQueue`1">
            <summary>
            Represents a CCR based work queue.
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncWorkQueue`1.#ctor(Microsoft.Ccr.Core.DispatcherQueue,MFDLabs.Concurrency.AsyncWorkQueue{`0}.AsyncItemHandler)">
            <summary>
            Constructs a new CCR based WorkQueue
            </summary>
            <param name="dispatcherQueue"></param>
            <param name="itemHandler"></param>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncWorkQueue`1.EnqueueWorkItem(`0)">
            <summary>
            Queue a work item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncWorkQueue`1.EnqueueWorkItem(`0,System.Action)">
            <summary>
            Queue a work item
            </summary>
            <param name="item"></param>
            <param name="completionTask"></param>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncWorkQueue`1.EnqueueWorkItem(`0,Microsoft.Ccr.Core.SuccessFailurePort)">
            <summary>
            Queue a work item
            </summary>
            <param name="item"></param>
            <param name="result"></param>
        </member>
        <member name="T:MFDLabs.Concurrency.AsyncWorkQueue`1.AsyncItemHandler">
            <summary>
            Handler
            </summary>
            <param name="item"></param>
            <param name="result"></param>
        </member>
        <member name="T:MFDLabs.Concurrency.ConcurrencyService">
            <summary>
            A simple service class that extends the <see cref="T:Microsoft.Ccr.Core.CcrServiceBase"/>
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.ConcurrencyService.TaskQueue">
            <summary>
            Exposes the base TaskQueue
            </summary>
        </member>
        <member name="F:MFDLabs.Concurrency.ConcurrencyService.Singleton">
            <summary>
            Exposes a singleton
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.BlockUntilCompletion(Microsoft.Ccr.Core.ITask,System.TimeSpan)">
            <summary>
            Blocks the current thread until the given task finishes
            </summary>
            <param name="task">A task to block</param>
            <param name="timeout">A timeout</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.Choice(System.Action{Microsoft.Ccr.Core.SuccessResult},System.Action{System.Exception})">
            <summary>
            Performs a Choice operation
            </summary>
            <param name="successHandler">The success result</param>
            <param name="failureHandler">The failure result</param>
            <returns></returns>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.Choice``2(System.Action{``0},System.Action{``1})">
            <summary>
            Performs generic Choice operation
            </summary>
            <param name="handler0">The success handler</param>
            <param name="handler1">The failure handler</param>
            <typeparam name="T0">SuccessResult</typeparam>
            <typeparam name="T1">FailureResult</typeparam>
            <returns></returns>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.Choice``2(Microsoft.Ccr.Core.PortSet{``0,``1},System.Action{``0},System.Action{``1})">
            <summary>
            Performs a generic choice with result
            </summary>
            <param name="resultPortSet">The result</param>
            <param name="handler0">The success handler</param>
            <param name="handler1">The failure handler</param>
            <typeparam name="T0">SuccessResult</typeparam>
            <typeparam name="T1">FailureResult</typeparam>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.Choice``1(Microsoft.Ccr.Core.PortSet{``0,System.Exception},System.Action{``0})">
            <summary>
            Perfoms a generic choice with only success T
            </summary>
            <param name="resultPortSet">The result</param>
            <param name="successHandler">On success hit.</param>
            <typeparam name="T">SuccessResult</typeparam>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.Delay(System.TimeSpan,Microsoft.Ccr.Core.Handler)">
            <summary>
            Delay for the given timespan and then execute the Handler
            </summary>
            <param name="timeSpan">Time to delay</param>
            <param name="handler">Handler to hit</param>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.DelayInterator(System.TimeSpan,Microsoft.Ccr.Core.IteratorHandler)">
            <summary>
            Delay an iterator task
            </summary>
            <param name="timeSpan">Time to delay</param>
            <param name="handler">Handler to hit</param>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.ExecuteToCompletion(Microsoft.Ccr.Core.IteratorHandler)">
            <summary>
            Executes an iterator until it completes
            </summary>
            <param name="handler">The handler</param>
            <returns></returns>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.NestIterator(Microsoft.Ccr.Core.IteratorHandler)">
            <summary>
            Nest an iterator handler
            </summary>
            <param name="handler">The handler</param>
            <returns></returns>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.Receive``1(System.Boolean,System.Action{``0})">
            <summary>
            Init a receive on a new Port
            </summary>
            <param name="persist">Persist receives</param>
            <param name="handler">On Receive</param>
            <typeparam name="T">SuccessResult</typeparam>
            <returns></returns>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.Receive``1(System.Boolean,Microsoft.Ccr.Core.Port{``0},System.Action{``0})">
            <summary>
            Generic receive on a result port
            </summary>
            <param name="persist">Persist receives</param>
            <param name="result">Result port</param>
            <param name="handler">On Receive</param>
            <typeparam name="T">SuccessResult</typeparam>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.Spawn(Microsoft.Ccr.Core.Handler)">
            <summary>
            Exposes the Spawn function for client with Causalties
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.SpawnIterator(Microsoft.Ccr.Core.IteratorHandler)">
            <summary>
            Exposes the SpawnIterator function for clients
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.SpawnIterator``1(``0,Microsoft.Ccr.Core.IteratorHandler{``0})">
            <summary>
            Spawn an iterator for the given handler
            </summary>
            <param name="t0">SuccessResult</param>
            <param name="handler">OnIterator</param>
            <typeparam name="T0">SuccessResult</typeparam>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.SpawnIterator``2(``0,``1,Microsoft.Ccr.Core.IteratorHandler{``0,``1})">
            <summary>
            Spawn an iterator for the given handler
            </summary>
            <param name="t0">SuccessResult</param>
            <param name="t1">FailureResult</param>
            <param name="handler">OnIterator</param>
            <typeparam name="T0">SuccessResult</typeparam>
            <typeparam name="T1">FailureResult</typeparam>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.SpawnIterator``3(``0,``1,``2,Microsoft.Ccr.Core.IteratorHandler{``0,``1,``2})">
            <summary>
            Spawn an iterator for the given handler
            </summary>
            <param name="t0">SuccessResult</param>
            <param name="t1">FailureResult</param>
            <param name="t2"></param>
            <param name="handler">OnIterator</param>
            <typeparam name="T0">SuccessResult</typeparam>
            <typeparam name="T1">FailureResult</typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.TimeoutPort(System.TimeSpan)">
            <summary>
            Exposes base TimeoutPort
            </summary>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.Wait(System.TimeSpan)">
            <summary>
            Wait for receive
            </summary>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:MFDLabs.Concurrency.FastAsyncResult">
            <summary>
            Simple fast async result.
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.FastAsyncResult.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Construct a new FastAsyncResult
            </summary>
            <param name="callback">On AsyncCallbackInvoked</param>
            <param name="state">State</param>
        </member>
        <member name="P:MFDLabs.Concurrency.FastAsyncResult.AsyncState">
            <inheritdoc/>
        </member>
        <member name="P:MFDLabs.Concurrency.FastAsyncResult.AsyncWaitHandle">
            <summary>
            wait handle
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.FastAsyncResult.CompletedSynchronously">
            <inheritdoc/>
        </member>
        <member name="P:MFDLabs.Concurrency.FastAsyncResult.IsCompleted">
            <inheritdoc/>
        </member>
        <member name="M:MFDLabs.Concurrency.FastAsyncResult.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:MFDLabs.Concurrency.FastAsyncResult.SetComplete">
            <summary>
            Set complete
            </summary>
        </member>
        <member name="T:MFDLabs.Concurrency.Interleaver">
            <summary>
            Simple interleave wrapper
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.Interleaver.DoExclusive(System.Action)">
            <summary>
            DoExclusive
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:MFDLabs.Concurrency.Interleaver.DoConcurrent(System.Action)">
            <summary>
            DoConcurrent
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:MFDLabs.Concurrency.Interleaver.#ctor">
            <summary>
            Construct new interleaver
            </summary>
        </member>
        <member name="T:MFDLabs.Concurrency.RefreshAhead`1">
            <summary>
            Represents a CCR based refresh class.
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.RefreshAhead`1.IntervalSinceRefresh">
            <summary>
            The last time the class refreshed
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.RefreshAhead`1.Value">
            <summary>
            The raw value.
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.RefreshAhead`1.#ctor(System.TimeSpan,System.Func{`0})">
            <summary>
            New CCR refresher
            </summary>
            <param name="refreshInterval"></param>
            <param name="refreshDelegate"></param>
        </member>
        <member name="M:MFDLabs.Concurrency.RefreshAhead`1.ConstructAndPopulate(System.TimeSpan,System.Func{`0})">
            <summary>
            Construct one :)
            </summary>
            <param name="refreshInterval"></param>
            <param name="refreshDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MFDLabs.Concurrency.RefreshAhead`1.ConstructAndPopulate(System.TimeSpan,System.Action{Microsoft.Ccr.Core.PortSet{`0,System.Exception}},Microsoft.Ccr.Core.PortSet{MFDLabs.Concurrency.RefreshAhead{`0},System.Exception})">
            <summary>
            Construct one :)
            </summary>
            <param name="refreshInterval"></param>
            <param name="refreshDelegate"></param>
            <param name="result"></param>
        </member>
        <member name="M:MFDLabs.Concurrency.RefreshAhead`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:MFDLabs.Concurrency.Unsafe.Packet">
            <summary>
            Unsafe packet
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.Unsafe.Packet.Id">
            <summary>
            Packet ID
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.Unsafe.Packet.SequenceId">
            <summary>
            Packet Sequence ID
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.Unsafe.Packet.Data">
            <summary>
            Raw packet Data
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.Unsafe.Packet.Created">
            <summary>
            When created
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.Unsafe.Packet.Status">
            <summary>
            Execution status
            </summary>
        </member>
        <member name="T:MFDLabs.Concurrency.IPacket">
            <summary>
            The <see cref="T:MFDLabs.Concurrency.IPacket"/> to be used with factories.
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.IPacket.Id">
            <summary>
            The <see cref="P:MFDLabs.Concurrency.IPacket.Id"/> of the <see cref="T:MFDLabs.Concurrency.IPacket"/> when receiving.
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.IPacket.SequenceId">
            <summary>
            The <see cref="P:MFDLabs.Concurrency.IPacket.SequenceId"/> of the <see cref="T:MFDLabs.Concurrency.IPacket"/> when creating.
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.IPacket.Created">
            <summary>
            The <see cref="T:System.DateTime"/> for when the <see cref="T:MFDLabs.Concurrency.IPacket"/> was created.
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.IPacket.PerformanceMonitor">
            <summary>
            A <see cref="T:MFDLabs.Concurrency.TaskThreadMonitor"/> to be used to record performance for the current <see cref="T:MFDLabs.Concurrency.IPacket"/>
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.IPacket.Status">
            <summary>
            The <see cref="T:MFDLabs.Concurrency.PacketProcessingStatus"/> of the <see cref="T:MFDLabs.Concurrency.IPacket"/> when recording metrics via <see cref="P:MFDLabs.Concurrency.IPacket.PerformanceMonitor"/>
            </summary>
        </member>
        <member name="T:MFDLabs.Concurrency.IPacket`1">
            <summary>
            The <see cref="T:MFDLabs.Concurrency.IPacket`1"/> to be used with factories with an item.
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.IPacket`1.Item">
            <summary>
            The <see cref="P:MFDLabs.Concurrency.IPacket`1.Item"/> of the <see cref="T:MFDLabs.Concurrency.IPacket`1"/>
            </summary>
        </member>
        <member name="T:MFDLabs.Concurrency.Packet">
            <summary>
            The <see cref="T:MFDLabs.Concurrency.IPacket"/> implementation.
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.Packet.Id">
            <inheritdoc/>
        </member>
        <member name="P:MFDLabs.Concurrency.Packet.SequenceId">
            <inheritdoc/>
        </member>
        <member name="P:MFDLabs.Concurrency.Packet.Created">
            <inheritdoc/>
        </member>
        <member name="P:MFDLabs.Concurrency.Packet.PerformanceMonitor">
            <inheritdoc/>
        </member>
        <member name="P:MFDLabs.Concurrency.Packet.Status">
            <inheritdoc/>
        </member>
        <member name="M:MFDLabs.Concurrency.Packet.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:MFDLabs.Concurrency.Packet`1">
            <summary>
            The <see cref="T:MFDLabs.Concurrency.IPacket`1"/> implementation.
            </summary>
            <typeparam name="TItem">The item of the packet.</typeparam>
        </member>
        <member name="P:MFDLabs.Concurrency.Packet`1.Item">
            <inheritdoc/>
        </member>
        <member name="T:MFDLabs.Concurrency.DispatcherMonitor">
            <summary>
            Used for debugging Dispatcher problems
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.DispatcherMonitor.#ctor(Microsoft.Ccr.Core.Dispatcher)">
            <summary>
            Construct new dispatcher monitor
            </summary>
            <param name="dispatcher"></param>
        </member>
        <member name="M:MFDLabs.Concurrency.DispatcherMonitor.GetWorkerStacks">
            <summary>
            For debugging only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFDLabs.Concurrency.DispatcherMonitor.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:MFDLabs.Concurrency.TaskThreadMonitor">
            <summary>
            The monitor to be used with <see cref="T:MFDLabs.Concurrency.Base.BaseTask`2"/> and <see cref="T:MFDLabs.Concurrency.Base.Async.AsyncBaseTask`2"/>, along with <see cref="T:MFDLabs.Concurrency.Packet"/>
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.TaskThreadMonitor.CountOfItemsProcessed">
            <summary>
            The count of items processed as a <see cref="T:MFDLabs.Instrumentation.IRawValueCounter"/>
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.TaskThreadMonitor.RateOfItemsPerSecondProcessed">
            <summary>
            The count of items processed as a <see cref="T:MFDLabs.Instrumentation.IRateOfCountsPerSecondCounter"/>
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.TaskThreadMonitor.AverageRateOfItems">
            <summary>
            The average items processed as a <see cref="T:MFDLabs.Instrumentation.IAverageValueCounter"/>
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.TaskThreadMonitor.CountOfItemsProcessedThatSucceed">
            <summary>
            The count of items processed that did succeed as a <see cref="T:MFDLabs.Instrumentation.IRawValueCounter"/>
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.TaskThreadMonitor.RateOfItemsPerSecondProcessedThatSucceed">
            <summary>
            The count of items processed that did succeed as a <see cref="T:MFDLabs.Instrumentation.IRateOfCountsPerSecondCounter"/>
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.TaskThreadMonitor.AverageRateOfItemsThatSucceed">
            <summary>
            The average items processed that did succeed as a <see cref="T:MFDLabs.Instrumentation.IAverageValueCounter"/>
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.TaskThreadMonitor.CountOfItemsProcessedThatFail">
            <summary>
            The count of items processed that did fail as a <see cref="T:MFDLabs.Instrumentation.IRawValueCounter"/>
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.TaskThreadMonitor.RateOfItemsPerSecondProcessedThatFail">
            <summary>
            The count of items processed that did fail as a <see cref="T:MFDLabs.Instrumentation.IRateOfCountsPerSecondCounter"/>
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.TaskThreadMonitor.AverageRateOfItemsThatFail">
            <summary>
            The average items processed that did fail as a <see cref="T:MFDLabs.Instrumentation.IAverageValueCounter"/>
            </summary>
        </member>
    </members>
</doc>
