<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MFDLabs.Concurrency</name>
    </assembly>
    <members>
        <member name="T:MFDLabs.Concurrency.PatchedDispatcherQueue">
            <summary>
            http://social.msdn.microsoft.com/Forums/en-US/roboticsccr/thread/75f441b6-9eb0-4ce9-bbd2-49505ccb4152/
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.PatchedDispatcherQueue.#ctor(System.String,Microsoft.Ccr.Core.Dispatcher)">
            <inheritdoc/>
        </member>
        <member name="M:MFDLabs.Concurrency.PatchedDispatcherQueue.TryDequeue(Microsoft.Ccr.Core.ITask@)">
            <inheritdoc/>
        </member>
        <member name="T:MFDLabs.Concurrency.AsyncHelper">
            <summary>
            A class for help with Async Begin and End calls.
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncHelper.Call``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},Microsoft.Ccr.Core.PortSet{``0,System.Exception},System.TimeSpan,System.Action)">
            <summary>
            Calls an async method that uses the IAsyncResult pattern
            Posts the result of the method call into a PortSet
            Includes a Timeout!
            </summary>
            <typeparam name="TResult">The result of the async method</typeparam>
            <param name="begin">The BeginXXX function</param>
            <param name="end">The EndXXX function</param>
            <param name="result"></param>
            <param name="timeout"></param>
            <param name="finalizer"></param>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncHelper.BlockingCall``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.TimeSpan,System.Action)">
            <summary>
            Calls an async method that uses the IAsyncResult pattern blocking
            Posts the result of the method call into a PortSet
            Includes a Timeout!
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="begin"></param>
            <param name="end"></param>
            <param name="timeout"></param>
            <param name="finalizer"></param>
            <returns></returns>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncHelper.Call``2(System.Func{``1,System.AsyncCallback,System.Object,System.IAsyncResult},``1,System.Func{System.IAsyncResult,``0},Microsoft.Ccr.Core.PortSet{``0,System.Exception},System.TimeSpan,System.Action)">
            <summary>
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncHelper.Call``3(System.Func{``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},``1,``2,System.Func{System.IAsyncResult,``0},Microsoft.Ccr.Core.PortSet{``0,System.Exception},System.TimeSpan,System.Action)">
            <summary>
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncHelper.Call``4(System.Func{``1,``2,``3,System.AsyncCallback,System.Object,System.IAsyncResult},``1,``2,``3,System.Func{System.IAsyncResult,``0},Microsoft.Ccr.Core.PortSet{``0,System.Exception},System.TimeSpan,System.Action)">
            <summary>
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncHelper.Call``5(System.Func{``1,``2,``3,``4,System.AsyncCallback,System.Object,System.IAsyncResult},``1,``2,``3,``4,System.Func{System.IAsyncResult,``0},Microsoft.Ccr.Core.PortSet{``0,System.Exception},System.TimeSpan,System.Action)">
            <summary>
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncHelper.Call``6(System.Func{``1,``2,``3,``4,``5,System.AsyncCallback,System.Object,System.IAsyncResult},``1,``2,``3,``4,``5,System.Func{System.IAsyncResult,``0},Microsoft.Ccr.Core.PortSet{``0,System.Exception},System.TimeSpan,System.Action)">
            <summary>
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncHelper.Call(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},Microsoft.Ccr.Core.SuccessFailurePort,System.TimeSpan,System.Action)">
            <summary>
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncHelper.Call``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},``0,System.Action{System.IAsyncResult},Microsoft.Ccr.Core.SuccessFailurePort,System.TimeSpan,System.Action)">
            <summary>
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncHelper.Call``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},``0,``1,System.Action{System.IAsyncResult},Microsoft.Ccr.Core.SuccessFailurePort,System.TimeSpan,System.Action)">
            <summary>
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncHelper.Call``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},``0,``1,``2,System.Action{System.IAsyncResult},Microsoft.Ccr.Core.SuccessFailurePort,System.TimeSpan,System.Action)">
            <summary>
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncHelper.Call``4(System.Func{``0,``1,``2,``3,System.AsyncCallback,System.Object,System.IAsyncResult},``0,``1,``2,``3,System.Action{System.IAsyncResult},Microsoft.Ccr.Core.SuccessFailurePort,System.TimeSpan,System.Action)">
            <summary>
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncHelper.Call``5(System.Func{``0,``1,``2,``3,``4,System.AsyncCallback,System.Object,System.IAsyncResult},``0,``1,``2,``3,``4,System.Action{System.IAsyncResult},Microsoft.Ccr.Core.SuccessFailurePort,System.TimeSpan,System.Action)">
            <summary>
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncHelper.GetCollection``2(System.Collections.Generic.ICollection{``0},MFDLabs.Concurrency.AsyncHelper.DoLookup{``0,``1},Microsoft.Ccr.Core.PortSet{System.Collections.Generic.ICollection{``1},System.Exception})">
            <summary>
            </summary>
        </member>
        <member name="T:MFDLabs.Concurrency.AsyncHelper.DoLookup`2">
            <summary>
            </summary>
        </member>
        <member name="T:MFDLabs.Concurrency.AsyncWorkQueue`1">
            <summary>
            Represents a CCR based work queue.
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncWorkQueue`1.#ctor(Microsoft.Ccr.Core.DispatcherQueue,MFDLabs.Concurrency.AsyncWorkQueue{`0}.AsyncItemHandler)">
            <summary>
            Constructs a new CCR based WorkQueue
            </summary>
            <param name="dispatcherQueue"></param>
            <param name="itemHandler"></param>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncWorkQueue`1.EnqueueWorkItem(`0)">
            <summary>
            Queue a work item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncWorkQueue`1.EnqueueWorkItem(`0,System.Action)">
            <summary>
            Queue a work item
            </summary>
            <param name="item"></param>
            <param name="completionTask"></param>
        </member>
        <member name="M:MFDLabs.Concurrency.AsyncWorkQueue`1.EnqueueWorkItem(`0,Microsoft.Ccr.Core.SuccessFailurePort)">
            <summary>
            Queue a work item
            </summary>
            <param name="item"></param>
            <param name="result"></param>
        </member>
        <member name="T:MFDLabs.Concurrency.AsyncWorkQueue`1.AsyncItemHandler">
            <summary>
            Handler
            </summary>
            <param name="item"></param>
            <param name="result"></param>
        </member>
        <member name="T:MFDLabs.Concurrency.ConcurrencyService">
            <summary>
            A simple service class that extends the <see cref="T:Microsoft.Ccr.Core.CcrServiceBase"/>
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.ConcurrencyService.TaskQueue">
            <summary>
            Exposes the base TaskQueue
            </summary>
        </member>
        <member name="F:MFDLabs.Concurrency.ConcurrencyService.Singleton">
            <summary>
            Exposes a singleton
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.BlockUntilCompletion(Microsoft.Ccr.Core.ITask,System.TimeSpan)">
            <summary>
            Blocks the current thread until the given task finishes
            </summary>
            <param name="task">A task to block</param>
            <param name="timeout">A timeout</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.Choice(System.Action{Microsoft.Ccr.Core.SuccessResult},System.Action{System.Exception})">
            <summary>
            Performs a Choice operation
            </summary>
            <param name="successHandler">The success result</param>
            <param name="failureHandler">The failure result</param>
            <returns></returns>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.Choice``2(System.Action{``0},System.Action{``1})">
            <summary>
            Performs generic Choice operation
            </summary>
            <param name="handler0">The success handler</param>
            <param name="handler1">The failure handler</param>
            <typeparam name="T0">SuccessResult</typeparam>
            <typeparam name="T1">FailureResult</typeparam>
            <returns></returns>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.Choice``2(Microsoft.Ccr.Core.PortSet{``0,``1},System.Action{``0},System.Action{``1})">
            <summary>
            Performs a generic choice with result
            </summary>
            <param name="resultPortSet">The result</param>
            <param name="handler0">The success handler</param>
            <param name="handler1">The failure handler</param>
            <typeparam name="T0">SuccessResult</typeparam>
            <typeparam name="T1">FailureResult</typeparam>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.Choice``1(Microsoft.Ccr.Core.PortSet{``0,System.Exception},System.Action{``0})">
            <summary>
            Perfoms a generic choice with only success T
            </summary>
            <param name="resultPortSet">The result</param>
            <param name="successHandler">On success hit.</param>
            <typeparam name="T">SuccessResult</typeparam>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.Delay(System.TimeSpan,Microsoft.Ccr.Core.Handler)">
            <summary>
            Delay for the given timespan and then execute the Handler
            </summary>
            <param name="timeSpan">Time to delay</param>
            <param name="handler">Handler to hit</param>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.DelayInterator(System.TimeSpan,Microsoft.Ccr.Core.IteratorHandler)">
            <summary>
            Delay an iterator task
            </summary>
            <param name="timeSpan">Time to delay</param>
            <param name="handler">Handler to hit</param>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.ExecuteToCompletion(Microsoft.Ccr.Core.IteratorHandler)">
            <summary>
            Executes an iterator until it completes
            </summary>
            <param name="handler">The handler</param>
            <returns></returns>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.NestIterator(Microsoft.Ccr.Core.IteratorHandler)">
            <summary>
            Nest an iterator handler
            </summary>
            <param name="handler">The handler</param>
            <returns></returns>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.Receive``1(System.Boolean,System.Action{``0})">
            <summary>
            Init a receive on a new Port
            </summary>
            <param name="persist">Persist receives</param>
            <param name="handler">On Receive</param>
            <typeparam name="T">SuccessResult</typeparam>
            <returns></returns>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.Receive``1(System.Boolean,Microsoft.Ccr.Core.Port{``0},System.Action{``0})">
            <summary>
            Generic receive on a result port
            </summary>
            <param name="persist">Persist receives</param>
            <param name="result">Result port</param>
            <param name="handler">On Receive</param>
            <typeparam name="T">SuccessResult</typeparam>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.Spawn(Microsoft.Ccr.Core.Handler)">
            <summary>
            Exposes the Spawn function for client with Causalties
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.SpawnIterator(Microsoft.Ccr.Core.IteratorHandler)">
            <summary>
            Exposes the SpawnIterator function for clients
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.SpawnIterator``1(``0,Microsoft.Ccr.Core.IteratorHandler{``0})">
            <summary>
            Spawn an iterator for the given handler
            </summary>
            <param name="t0">SuccessResult</param>
            <param name="handler">OnIterator</param>
            <typeparam name="T0">SuccessResult</typeparam>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.SpawnIterator``2(``0,``1,Microsoft.Ccr.Core.IteratorHandler{``0,``1})">
            <summary>
            Spawn an iterator for the given handler
            </summary>
            <param name="t0">SuccessResult</param>
            <param name="t1">FailureResult</param>
            <param name="handler">OnIterator</param>
            <typeparam name="T0">SuccessResult</typeparam>
            <typeparam name="T1">FailureResult</typeparam>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.SpawnIterator``3(``0,``1,``2,Microsoft.Ccr.Core.IteratorHandler{``0,``1,``2})">
            <summary>
            Spawn an iterator for the given handler
            </summary>
            <param name="t0">SuccessResult</param>
            <param name="t1">FailureResult</param>
            <param name="t2"></param>
            <param name="handler">OnIterator</param>
            <typeparam name="T0">SuccessResult</typeparam>
            <typeparam name="T1">FailureResult</typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.TimeoutPort(System.TimeSpan)">
            <summary>
            Exposes base TimeoutPort
            </summary>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.Wait(System.TimeSpan)">
            <summary>
            Wait for receive
            </summary>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:MFDLabs.Concurrency.FastAsyncResult">
            <summary>
            Simple fast async result.
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.FastAsyncResult.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Construct a new FastAsyncResult
            </summary>
            <param name="callback">On AsyncCallbackInvoked</param>
            <param name="state">State</param>
        </member>
        <member name="P:MFDLabs.Concurrency.FastAsyncResult.AsyncState">
            <inheritdoc/>
        </member>
        <member name="P:MFDLabs.Concurrency.FastAsyncResult.AsyncWaitHandle">
            <summary>
            wait handle
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.FastAsyncResult.CompletedSynchronously">
            <inheritdoc/>
        </member>
        <member name="P:MFDLabs.Concurrency.FastAsyncResult.IsCompleted">
            <inheritdoc/>
        </member>
        <member name="M:MFDLabs.Concurrency.FastAsyncResult.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:MFDLabs.Concurrency.FastAsyncResult.SetComplete">
            <summary>
            Set complete
            </summary>
        </member>
        <member name="T:MFDLabs.Concurrency.Interleaver">
            <summary>
            Simple interleave wrapper
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.Interleaver.DoExclusive(System.Action)">
            <summary>
            DoExclusive
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:MFDLabs.Concurrency.Interleaver.DoConcurrent(System.Action)">
            <summary>
            DoConcurrent
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:MFDLabs.Concurrency.Interleaver.#ctor">
            <summary>
            Construct new interleaver
            </summary>
        </member>
        <member name="T:MFDLabs.Concurrency.RefreshAhead`1">
            <summary>
            Represents a CCR based refresh class.
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.RefreshAhead`1.IntervalSinceRefresh">
            <summary>
            The last time the class refreshed
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.RefreshAhead`1.Value">
            <summary>
            The raw value.
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.RefreshAhead`1.#ctor(System.TimeSpan,System.Func{`0})">
            <summary>
            New CCR refresher
            </summary>
            <param name="refreshInterval"></param>
            <param name="refreshDelegate"></param>
        </member>
        <member name="M:MFDLabs.Concurrency.RefreshAhead`1.ConstructAndPopulate(System.TimeSpan,System.Func{`0})">
            <summary>
            Construct one :)
            </summary>
            <param name="refreshInterval"></param>
            <param name="refreshDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MFDLabs.Concurrency.RefreshAhead`1.ConstructAndPopulate(System.TimeSpan,System.Action{Microsoft.Ccr.Core.PortSet{`0,System.Exception}},Microsoft.Ccr.Core.PortSet{MFDLabs.Concurrency.RefreshAhead{`0},System.Exception})">
            <summary>
            Construct one :)
            </summary>
            <param name="refreshInterval"></param>
            <param name="refreshDelegate"></param>
            <param name="result"></param>
        </member>
        <member name="M:MFDLabs.Concurrency.RefreshAhead`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:MFDLabs.Concurrency.DispatcherMonitor">
            <summary>
            Used for debugging Dispatcher problems
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.DispatcherMonitor.#ctor(Microsoft.Ccr.Core.Dispatcher)">
            <summary>
            Construct new dispatcher monitor
            </summary>
            <param name="dispatcher"></param>
        </member>
        <member name="M:MFDLabs.Concurrency.DispatcherMonitor.GetWorkerStacks">
            <summary>
            For debugging only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFDLabs.Concurrency.DispatcherMonitor.Dispose">
            <inheritdoc/>
        </member>
    </members>
</doc>
