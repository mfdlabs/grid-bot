<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MFDLabs.Concurrency</name>
    </assembly>
    <members>
        <member name="M:MFDLabs.Concurrency.Base.Async.AsyncBasePlugin`1.OnReceive(MFDLabs.Concurrency.Packet)">
            <summary>
            The method to be invoked when the <see cref="T:Microsoft.Ccr.Core.Arbiter"/> calls <see cref="M:Microsoft.Ccr.Core.Arbiter.Activate(Microsoft.Ccr.Core.DispatcherQueue,Microsoft.Ccr.Core.ITask[])"/> with a new <see cref="T:MFDLabs.Concurrency.Packet"/>.
            </summary>
            <param name="packet">The <see cref="T:MFDLabs.Concurrency.IPacket"/> to be used when executing the task.</param>
            <returns>Returns a <see cref="T:System.Threading.Tasks.Task`1"/> to be awaited by tasks and task threads.</returns>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.Async.AsyncBasePlugin`2.OnReceive(MFDLabs.Concurrency.Packet{`1})">
            <summary>
            The method to be invoked when the <see cref="T:Microsoft.Ccr.Core.Arbiter"/> calls <see cref="M:Microsoft.Ccr.Core.Arbiter.Receive``1(System.Boolean,Microsoft.Ccr.Core.Port{``0},Microsoft.Ccr.Core.Handler{``0})"/> with a new <see cref="T:MFDLabs.Concurrency.Packet`1"/>.
            </summary>
            <param name="packet">The <see cref="T:MFDLabs.Concurrency.IPacket`1"/> to be used when executing the task.</param>
            <returns>Returns a <see cref="T:System.Threading.Tasks.Task`1"/> to be awaited by tasks and task threads.</returns>
        </member>
        <member name="P:MFDLabs.Concurrency.Base.Async.AsyncBaseTask`2.Name">
            <summary>
            The name of this <see cref="T:MFDLabs.Concurrency.Base.Async.AsyncBaseTask`2"/> and the <see cref="T:MFDLabs.Concurrency.TaskThreadMonitor"/> when recording performance.
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.Base.Async.AsyncBaseTask`2.CounterRegistry">
            <summary>
            The <see cref="T:MFDLabs.Instrumentation.ICounterRegistry"/> to be used by the task with the <see cref="T:MFDLabs.Concurrency.TaskThreadMonitor"/>.
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.Base.Async.AsyncBaseTask`2.PacketID">
            <summary>
            The <see cref="P:MFDLabs.Concurrency.IPacket.ID"/> to be set when creating new <see cref="T:MFDLabs.Concurrency.Packet`1"/>s
            </summary>
        </member>
        <member name="F:MFDLabs.Concurrency.Base.Async.AsyncBaseTask`2.Port">
            <summary>
            The <see cref="T:Microsoft.Ccr.Core.Port`1"/> to be used when receiving via <see cref="M:Microsoft.Ccr.Core.Arbiter.Receive``1(System.Boolean,Microsoft.Ccr.Core.Port{``0},Microsoft.Ccr.Core.Handler{``0})"/>.
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.Base.Async.AsyncBaseTask`2.CanReceive">
            <summary>
            A boolean that determines if the current task is allowed to receive new members.
            Set to false when the last <see cref="T:MFDLabs.Concurrency.PluginResult"/> is <see cref="F:MFDLabs.Concurrency.PluginResult.StopProcessingAndDeallocate"/>.
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.Async.AsyncBaseTask`2.Activate">
            <summary>
            Actives an item inside the <see cref="T:Microsoft.Ccr.Core.Port`1"/>, it doesn't care about if there are items inside of it.
            </summary>
            <returns>Returns the last <see cref="T:MFDLabs.Concurrency.PluginResult"/>.</returns>
        </member>
        <member name="T:MFDLabs.Concurrency.Base.Async.AsyncBaseTaskThread`2">
            <summary>
            The base task thread but async!! :)
            </summary>
            <typeparam name="TSingleton">the implementated class, must be base task thread or of base task thread.</typeparam>
            <typeparam name="TItem">the item in the port</typeparam>
        </member>
        <member name="P:MFDLabs.Concurrency.Base.Async.AsyncBaseTaskThread`2.ProcessActivationInterval">
            <summary>
            A timeout for each activation of the <see cref="F:MFDLabs.Concurrency.Base.Async.AsyncBaseTask`2.Port"/>.
            </summary>
        </member>
        <member name="T:MFDLabs.Concurrency.Base.Async.AsyncExpiringTaskThread`2">
            <summary>
            WORK IN PROGRESS DO NOT USE IN PROD!!!
            </summary>
            <typeparam name="TSingleton"></typeparam>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="P:MFDLabs.Concurrency.Base.Async.AsyncExpiringTaskThread`2.Expiration">
            <summary>
            The timeout to be implemented when this <see cref="T:MFDLabs.Concurrency.Base.Async.AsyncExpiringTaskThread`2"/> to expire.
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.Base.BaseTask`2.Name">
            <summary>
            The name of this <see cref="T:MFDLabs.Concurrency.Base.BaseTask`2"/> and the <see cref="T:MFDLabs.Concurrency.TaskThreadMonitor"/> when monitoring performance.
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.Base.BaseTask`2.CounterRegistry">
            <summary>
            The <see cref="T:MFDLabs.Instrumentation.ICounterRegistry"/> to be used by the task with the <see cref="T:MFDLabs.Concurrency.TaskThreadMonitor"/>.
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.Base.BaseTask`2.PacketID">
            <summary>
            The <see cref="P:MFDLabs.Concurrency.IPacket.ID"/> to be set when creating new <see cref="T:MFDLabs.Concurrency.Packet`1"/>s
            </summary>
        </member>
        <member name="F:MFDLabs.Concurrency.Base.BaseTask`2.Port">
            <summary>
            The <see cref="T:Microsoft.Ccr.Core.Port`1"/> to be used when receiving via <see cref="M:Microsoft.Ccr.Core.Arbiter.Receive``1(System.Boolean,Microsoft.Ccr.Core.Port{``0},Microsoft.Ccr.Core.Handler{``0})"/>.
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.Base.BaseTask`2.CanReceive">
            <summary>
            A boolean that determines if the current task is allowed to receive new members.
            Set to false when the last <see cref="T:MFDLabs.Concurrency.PluginResult"/> is <see cref="F:MFDLabs.Concurrency.PluginResult.StopProcessingAndDeallocate"/>.
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.BaseTask`2.Activate">
            <summary>
            Actives an item inside the <see cref="T:Microsoft.Ccr.Core.Port`1"/>, it doesn't care about if there are items inside of it.
            </summary>
            <returns>Returns the last <see cref="T:MFDLabs.Concurrency.PluginResult"/>.</returns>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.BasePlugin`1.OnReceive(MFDLabs.Concurrency.Packet@)">
            <summary>
            The method to be invoked when the <see cref="T:Microsoft.Ccr.Core.Arbiter"/> calls <see cref="M:Microsoft.Ccr.Core.Arbiter.Activate(Microsoft.Ccr.Core.DispatcherQueue,Microsoft.Ccr.Core.ITask[])"/> with a new reference <see cref="T:MFDLabs.Concurrency.Packet"/>.
            </summary>
            <param name="packet">The reference <see cref="T:MFDLabs.Concurrency.IPacket"/> to be used when executing the task.</param>
            <returns>Returns a <see cref="T:MFDLabs.Concurrency.PluginResult"/> that determines if the task should continue processing, or should stop processing.</returns>
        </member>
        <member name="M:MFDLabs.Concurrency.Base.BasePlugin`2.OnReceive(MFDLabs.Concurrency.Packet{`1}@)">
            <summary>
            The method to be invoked when the <see cref="T:Microsoft.Ccr.Core.Arbiter"/> calls <see cref="M:Microsoft.Ccr.Core.Arbiter.Activate(Microsoft.Ccr.Core.DispatcherQueue,Microsoft.Ccr.Core.ITask[])"/> with a new reference <see cref="T:MFDLabs.Concurrency.Packet`1"/>.
            </summary>
            <param name="packet">The reference <see cref="T:MFDLabs.Concurrency.IPacket`1"/> to be used when executing the task.</param>
            <returns>Returns a <see cref="T:MFDLabs.Concurrency.PluginResult"/> that determines if the task should continue processing, or should stop processing.</returns>
        </member>
        <member name="T:MFDLabs.Concurrency.Base.BaseTaskThread`2">
            <summary>
            The base task thread !! :)
            </summary>
            <typeparam name="TSingleton">the implementated class, must be base task thread or of base task thread.</typeparam>
            <typeparam name="TItem">the item in the port</typeparam>
        </member>
        <member name="P:MFDLabs.Concurrency.Base.BaseTaskThread`2.ProcessActivationInterval">
            <summary>
            A timeout for each activation of the <see cref="F:MFDLabs.Concurrency.Base.BaseTask`2.Port"/>.
            </summary>
        </member>
        <member name="T:MFDLabs.Concurrency.Base.ExpiringTaskThread`2">
            <summary>
            WORK IN PROGRESS DO NOT USE IN PROD!!!
            </summary>
            <typeparam name="TSingleton"></typeparam>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="P:MFDLabs.Concurrency.Base.ExpiringTaskThread`2.Expiration">
            <summary>
            The timeout to be implemented when this <see cref="T:MFDLabs.Concurrency.Base.ExpiringTaskThread`2"/> to expire.
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.Spawn(Microsoft.Ccr.Core.Handler)">
            <summary>
            Exposes the Spawn function for client with Causalties
            </summary>
        </member>
        <member name="M:MFDLabs.Concurrency.ConcurrencyService.SpawnIterator(Microsoft.Ccr.Core.IteratorHandler)">
            <summary>
            Exposes the SpawnIterator function for clients
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.IPacket.ID">
            <summary>
            The <see cref="P:MFDLabs.Concurrency.IPacket.ID"/> of the <see cref="T:MFDLabs.Concurrency.IPacket"/> when receiving.
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.IPacket.SequenceID">
            <summary>
            The <see cref="P:MFDLabs.Concurrency.IPacket.SequenceID"/> of the <see cref="T:MFDLabs.Concurrency.IPacket"/> when creating.
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.IPacket.Created">
            <summary>
            The <see cref="T:System.DateTime"/> for when the <see cref="T:MFDLabs.Concurrency.IPacket"/> was created.
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.IPacket.PerformanceMonitor">
            <summary>
            A <see cref="T:MFDLabs.Concurrency.TaskThreadMonitor"/> to be used to record performance for the current <see cref="T:MFDLabs.Concurrency.IPacket"/>
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.IPacket.Status">
            <summary>
            The <see cref="T:MFDLabs.Concurrency.PacketProcessingStatus"/> of the <see cref="T:MFDLabs.Concurrency.IPacket"/> when recording metrics via <see cref="P:MFDLabs.Concurrency.IPacket.PerformanceMonitor"/>
            </summary>
        </member>
        <member name="P:MFDLabs.Concurrency.IPacket`1.Item">
            <summary>
            The <see cref="P:MFDLabs.Concurrency.IPacket`1.Item"/> of the <see cref="T:MFDLabs.Concurrency.IPacket`1"/>
            </summary>
        </member>
        <member name="T:MFDLabs.Concurrency.Packet">
            <summary>
            The <see cref="T:MFDLabs.Concurrency.IPacket"/> implementation.
            </summary>
        </member>
        <member name="T:MFDLabs.Concurrency.Packet`1">
            <summary>
            The <see cref="T:MFDLabs.Concurrency.IPacket`1"/> implementation.
            </summary>
            <typeparam name="TItem">The item of the packet.</typeparam>
        </member>
    </members>
</doc>
