local a=...local b=a['isAdmin']if not b then warn("We are in a VM state, blocking specific methods is expected.")local setfenv=setfenv;local getfenv=getfenv;local setmetatable=setmetatable;local getmetatable=getmetatable;local type=type;local select=select;local tostring=tostring;local newproxy=newproxy;local print=print;local next=next;local c={}c.__metatable="This debug metatable is locked."local d=nil;local e={}function c:__index(f)if f:lower()=="getservice"then return function(...)local g={...}local h=game:GetService(g[2])if h==game:GetService("HttpService")or h==game:GetService("HttpRbxApiService")then d=h end;return h end end;if d==game or d==game:GetService("HttpService")or d==game:GetService("HttpRbxApiService")then if f:lower()=="postasyncfullurl"or f:lower()=="requestasyncfullurl"or f:lower()=="getasyncfullurl"or f:lower()=="postasync"or f:lower()=="requestasync"or f:lower()=="getasync"or f:lower()=="requestasync"or f:lower()=="httppostasync"or f:lower()=="httppost"or f:lower()=="httpgetasync"or f:lower()=="httpget"or f:lower()=="requestinternal"then return function(...)error(string.format("The method by the name of '%s' is disabled.",f))end end elseif typeof(d)=="Instance"then if d:IsA("NetworkClient")or d:IsA("NetworkMarker")or d:IsA("NetworkPeer")or d:IsA("NetworkReplicator")or d:IsA("NetworkServer")or d:IsA("NetworkSettings")then return nil end end;d=self[f]return self[f]end;function c:__newindex(f,i)self[f]=i end;function c:__call(...)self(...)end;function c:__concat(i)return self..i end;function c:__unm()return-self end;function c:__add(i)return self+i end;function c:__sub(i)return self-i end;function c:__mul(i)return self*i end;function c:__div(i)return self/i end;function c:__mod(i)return self%i end;function c:__pow(i)return self^i end;function c:__tostring()return tostring(self)end;function c:__eq(i)return self==i end;function c:__lt(i)return self<i end;function c:__le(i)return self<=i end;function c:__len()return#self end;local j={__index=c}local k=setmetatable({},{__mode="k"})local l=setmetatable({},{__mode="v"})local m;local n;local o={[setfenv]=function(p,q)if type(p)=="number"and p>0 then p=p+2 elseif p==l[p]then p=k[p]end;local r,s=pcall(getfenv,p)local t=q;if not r or s==l[s]then t=q else t=k[q]end;return m(setfenv(p,t))end,[getfenv]=function(p,q)if type(p)=="number"and p>0 then p=p+1 elseif p==l[p]then p=k[p]end;return m(getfenv(p))end}local u,v=1,0;function n(...)if u>v then u=1;v=select("#",...)if v==0 then return end end;local w=select(u,...)if w then if type(w)=="function"then local x=l[w]if x then local y=k[x]if y==w then return x else return y end else x=function(...)return n(w(m(...)))end;l[x]=x;l[w]=x;k[x]=w;return x end elseif l[w]then w=k[l[w]]end end;u=u+1;if u<=v then return w,n(...)else return w end end;function m(...)if u>v then u=1;v=select("#",...)if v==0 then return end end;local w=select(u,...)if w then local z=l[w]if not z then local A=type(w)if A=="function"then if o[w]then z=o[w]else local B=w;z=function(...)return m(B(n(...)))end end elseif A=="table"then z=setmetatable({},c)elseif A=="userdata"then z=newproxy(true)local C=getmetatable(z)for D,w in next,c do C[D]=w end else z=w end;l[w]=z;l[z]=z;k[z]=w end;w=z end;u=u+1;if u<=v then return w,m(...)else return w end end;for D,E in next,c do c[D]=m(E)end;local F=setfenv(1,m(getfenv(1)))local G=getfenv(1)setfenv(1,G)end;